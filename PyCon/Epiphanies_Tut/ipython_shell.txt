df
df.columns
run core_sat.py
df
df.columns
df['Date']
run core_sat.py
df
df.ix[:,1]
df.ix[:,1].plot()
plt.show()
%pylab
plt.show()
df.ix[:,1].plot()
run core_sat_examples.py
df
run core_sat_examples.py
df
df[:-1]
df[:-1].values
run core_sat_examples.py
df.shift
df.shift.ix[:,1]
df.ix[:,1]
df.ix[:,1]/df.ix[:,2]
df.ix[:,1]/df.ix[:,3]
df.ix[:,1]/df.ix[:,4]
df.ix[:,1]/df.ix[:,5]
df.ix[:,1]/df.ix[:,6]
df.ix[:,1]/df.ix[:,7]
df.ix[:,1]/df.ix[:,8]
df.ix[:,1]/df.ix[:,9]
df.ix[:,1]/df.ix[:,10]
df.ix[:,1]/df.ix[:,11]
df.ix[:,1]/df.ix[:,12]
df.ix[:,1]/df.ix[:,13]
df.ix[:,1]/df.ix[:,12]
df
run core_sat_examples.py
df[:,1]
df
df.ix[:,1]
df.ix[:,2]
df.ix[:,3]
df.ix[:,4]
df.ix[:,5]
df.ix[:,6]
df.ix[:,7]
df.ix[:,8]
df.ix[:,8].pct_change(1)
df.ix[:,0].pct_change(1)
df.ix[:,0]
run core_sat_examples.py
rtndf
rtndf.ix[:,1]
rtndf.ix[:,1].plot()
plt.show()
%pylab
plt.show()
rtndf.ix[:,1].plot()
rtndf.ix[:,0].plot()
rtndf.ix[:,2].plot()
plt.show()
rtndf.ix[:,3].plot()
rtndf.ix[:,4].plot()
rtndf.ix[:,5].plot()
rtndf.plot()
%paste
run core_sat_examples.py
run yahoo_examples.py
run core_sat_examples.py
rtndf
run core_sat_examples.py
yahoo_tkrlst
rtndf
satrtndf
rtndf
pd.concat([rtndf,satrtndf],axis=1)
pd.concat([rtndf,satrtndf],axis=1).dropna()
%paste
fdf
rtndf.index
satrtndf.index
run core_sat_examples.py
rtndf
rtndf.index
run core_sat_examples.py
fdf
fdf.columns
fdf
fdf.cumsum()
fdf.cumsum().ix[-1,:]
fdf.cumsum().ix[-1,:]/252
fdf.cumsum().ix[-1,:]
fdf.cumsum().ix[-1,:]/len(fdf)
fdf.cumsum().ix[-1,:]/len(fdf).values
%paste
muvec
fdf
fdf.cov()
len(fdf.cov())
fdf.cov()
fdf.cov().to_array()
pd.to_array(fdf.cov())
fdf.cov()
tv=fdf.cov()
fdf.cov()
np.array(fdf.cov())
import numpy as np
np.array(fdf.cov())
%paste
core_sat_optimizer(muvec, covmat, 2,3,0.2,0.4)
%paste
core_sat_optimizer(muvec, covmat, 2,3,0.2,0.4)
run core_sat_examples.py
core_sat_optimizer(muvec, covmat, 2,3,0.2,0.4)
w=core_sat_optimizer(muvec, covmat, 2,3,0.2,0.4)
sum(w[0:1])
sum(w[1:4])
sum(w[2:3])
run core_sat_examples.py
w=core_sat_optimizer(muvec, covmat, 2,3,0.2,0.4)
w
sum(w)
df
df.columns
fdf.columns
w=core_sat_optimizer(muvec, covmat, 4,1,0.2,0.4)
w
w=core_sat_optimizer(muvec, covmat, 4,2,0.2,0.4)
w
w=core_sat_optimizer(muvec, covmat, 4,6,0.2,0.4)
w
rtndf
wopt
%paste
wopt
rtndf[:,1]
fdf
fdf.ix[:,0]
fdf.ix[:,0].cumsum()
fdf.ix[:,0].cumsum().plot()
%pylab
fdf.ix[:,0].cumsum().plot()
fdf.ix[:,1].cumsum().plot()
fdf.ix[:,2].cumsum().plot()
fdf.ix[:,3].cumsum().plot()
rtndf.columns
satrtndf.columns
310*8
410*8
410*8+125
3400/1858
3400/1858.
3400/2400.
run tst2.jl
import julia
j . julia.Julia()
j = julia.Julia()
*(3,5,5,3)
run dict_tst.py
dct
import pandas as pd
pd.DataFrame(dct)
df
%paste
df
df.size()
len(df)
len(df.columns)
df.cov()
df.cov().eig
df.cov().values
%paste
evls
evc
evec
evecs
evs
evls
map(abs,evls)
%paste
evls
run clean_pd_mat.py
mat
run clean_pd_mat.py
%paste
cvmat
cvmat.values
mat=cvmat.values
%paste
evls
%paste
evls
np.abs(evls)
%paste
evls
evlscumsum
%paste
evlscumsum
%paste
thres=0.99
%paste
filtvals
%paste
sevlist
%paste
filtvals
sevlist
len(evls)
len(evls)-len(sevlist)
evls[:len(evls)-len(sevlist)]
evls[:len(evls)-len(sevlist)].append(sevlist)
np.append(evls[:len(evls)-len(sevlist)],sevlist)
%paste
rcmat
mat
mat-rcmat
mean(mat-rcmat)
np.mean(mat-rcmat)
mean(mat)
rcmat
eig(rcmat)
ev.,evc=eig(rcmat)
evl,evc=eig(rcmat)
evl
map(evl)
map(abs,evl)
evl
evls
feval
%paste
rcmat
ev,evc=eig(rcmat)
ev
evls,evec=eig(rcmat)
evls
evls,evec=eig(mat)
evls
run clean_pd_mat.py
rcmat
%paste
rcmat
evls
rcmat
evls,evec=eig(rcmat)
evls
evlsthres
thres
thres = 0.999
%paste
evls,evec=eig(rcmat)
evls
run clean_pd_mat.py
%paste
cvmat
tmat = clean_positive_semi_mat(cvmat.values)
tmat
nearPD(tmat)
%paste
nearPD(tmat)
nearPSD(tmat)
tmat
%paste
Higman(mat)
from numpy.linalg import svd
%paste
Higman(mat)
l1,l2=eig(Higman(mat))
l1
%paste
l1,l2=eig(Higman(mat))
l1
mat
Higman(mat)
(1539-2200)/2200.
run clean_pd_mat.py
mat
%paste
cvmat
mat=cvmat.values
mat
Higman(mat)
eig(mat)
v1,v2=eig(mat)
v1
v1,v2=eig(Higman(mat))
v1
import statsmodels.stats
statsmodels.stats.cov_nearest(mat)
statsmodels.stats.correlation_tools.cov_nearest(mat)
from statsmodels.stats.correlation_tools import cov_nearest
cov_nearest(mat)
tmat = cov_nearest(mat)
e1,e2=eig(tmat)
e1
431300.51/12*0.05
431300.51/12*0.015
431300.51/12*0.0105
431300.51/12*0.011
from julia import Julia
j = Julia()
import julia
from julia import Julia
j = Julia()
from julia import Julia
j = Julia()
import julia
%paste
!conda install pyglet
!pip install pyglet
%paste
import math
%paste
r
s
%paste
a
r
%paste
t
i=1
range(10)
s
%paste
a
i=0
%paste
t
import math
%paste
pwd
cd ~/Desktop/JohnProj/
run hybrid.py
df
%paste
df
run hybrid.py
df
df.cov
df.cov()
df.T.cov()
df.cov()
df.cov
df
len(df)
df.cov
df.cov()
run hybrid.py
df.iloc[:,0]
pd.to_datetime(df.iloc[:,0])
df.index = pd.to_datetime(df.iloc[:,0])
df
%paste
df
df[:.0]
df.iloc[:,0]
%paste
run hybrid.py
df
%paste
df.iloc[:,0]
df.cov()
run hybrid.py
df.iloc[:,1]
df.iloc[:,1]+df.iloc[:,2]
df.convert_objects(convert_numeric=True)
run hybrid.py
import numpy.linalg as la
la.eig(df.cov())
ev, evc=la.eig(df.cov())
ev
import matplotlib.pyplot as plt
plt.plot(ev)
plt.show()
evc
evc[0]
plt.plot(evc[0])
plt.show()
plt.plot(evc[:,0])
plt.show()
%paste
run hybrid.py
cd ~/Desktop/JohnProj/
run hybrid.py
df
run hybrid.py
ev
run hybrid.py
78498/9592
9592/1229
9592/1229.
78498/9592.
1229/168.
54-17
145-54
945-368
368-145
145-54
17-4
run hybrid.py
ev
evc[:,0]
evc[:,0].plot()
%pyoab
%pylab
evc[:,0].plot()
%paste
evc[0,:]
evc[0,:].plot()
plt.plot(evc[0,:])
plt.plot(evc[:,0])
plt.plot(evc[:,1])
plt.plot(evc[:,2])
ev[0]
ev[1]
ev[2]
ev
df
df.diff()
run hybrid.py
ev
evcdf
df
run hybrid.py
df
run hybrid.py
df.ix[:,1].hist()
df.ix[:,2].hist()
dfdiff.ix[:,2].hist()
dfdiff.ix[:,3].hist()
len(dfdiff)
len(dfdiff.columns)
df.index
df.columns
dfdiff['7y'].hist()
dfdiff['8y'].hist()
dfdiff['9y'].hist()
dfdiff['10y'].hist()
dfdiff['11y'].hist()
dfdiff['12y'].hist()
run hybrid.py
df.columns[10]
df.columns[11]
df.columns[12]
df.columns[13]
df.columns[9]
dfdiff['18m'].hist()
dfdiff['18M'].hist()
dfdiff.columns
dfdiff['18m '].hist()
dfdiff['2Y'].hist()
df.columns
dfdiff['2y'].hist()
%paste
import numpy as np
%paste
sqev
ev
ev[0:3]
evec
evc
sqev
%paste
randn
randn(0,1)
randn(0,1,10)
ev
np.randn()
np.random.randn(3)
%paste
evc
evc[:,0]
evc[:,0:3]
evc[:,0]
evc[:,1]
evc[:,2]
evc[:,0:3]
evc[:,0]
df
df.tail(1)
df.tail(1).values
%paste
pert
df +
curcrv
curcrv+pert
curcrv
%paste
curcrv
%paste
curcrv
run bod_vol.py
yahoo_tkrlst
run bod_vol.py
rtndf
prcdf
prcdf.ffill()
prcdf.ffill().dropna()
%paste
prcdf
ls
cd yahoo_downloader.py
vi yahoo_downloader.py
run bod_vol.py
rtndf
run bod_vol.py
rtndf
run rtndf
run bod_vol.py
rtndf
run bod_vol.py
%paste
ovrtn
exi
run bod_vol.py
ovrtn
%paste
ovol
%paste
ovol
%paste
ovol
ovrtn
ovrtn.corr()
%paste
crr
ovol[1][2]
ovol
crr[1][2]
crr
crr.ix[1]
crr.ix[1][2]
ovol[1]
ovol[2]
rtndf
rtndf.cov()
rtndf.cov()*252
ovol
lem(ovol)
len(ovol)
%paste
num = len(ovol)
%paste
rtnmat
rtndf.cov()
rtndf.cov().to_array()
cdf=rtndf.cov()
cdf.values
cdf.values-rtnmat
(cdf.values-rtnmat)/rtnmat
rtndf
ovrtn
ovrtn.head(10)
run bod_vol.py
rtndf
rtndf.corr()
rtndf.cov()
ovol
rtndf.cov()
ovrtn.cov()
rtnmat
ovrtn
rtndf.cov()
rtnmat
run bod_vol.py
run tst.py
run tst5.py
%paste
box_select
source.data
run tst5.py
run range_cb.py
cbex.py
run cbex
%paste
source
source.data
x
y
run cbex.py
p1.x
source
source.data
%paste
hzeros
hhist1
hh1
hh1.data_source
hh1.data_source.column_names
pv.data_source.column_names
tp=p.select(BoxSelectTool)
tp.dataspecs
ph.x_range
ph.x_range.bounds
ph.x_range.dataspecs
ph.x_range.dataspecs.im_
ph.x_range.dataspecs.im_class
pv.ygrid.bounds
p.y_range
p.y_range.apply_theme
p.y_range.bounds
p.y_range.dataspecs
p.y_range.dataspecs_with_props
p.y_range.default_span
p.y_range.document
p.y_range.end
p.y_range.flipped
p.y_range.follow
p.y_range.layout
p.y_range.lookup
p.y_range.lookup()
ph.xaxis.bounds
run bokeh_serv_1.py
%paste
hh1.data_source.data
%paste
sc.data_source
sc.data_source.data
%paste
sc.data_source.selected
r.data_source.data
r.data_source.selected
r.data_source.data
%paste
mandel(-0.5, 0.5, 0.01, -0.5, 0.5, 0.01, 100)
mandel(-0.5, 0.5, 10, -0.5, 0.5, 10, 100)
mandel(-0.5, 0.5, 10, -0.5, 0.5, 10, 1000)
mandel(-0.5, 0.5, 100, -0.5, 0.5, 100, 1000)
mandel(-0.5, 0.5, 30, -0.5, 0.5, 30, 1000)
from numpy import *
%paste
mandel(10,10,20,-0.5,0.5,-0.5,0.5)
%paste
imshow(mandel(10,10,20,-0.5,0.5,-0.5,0.5).T)
%pylab
imshow(mandel(10,10,20,-0.5,0.5,-0.5,0.5).T)
imshow(mandel(100,100,20,-0.5,0.5,-0.5,0.5).T)
import matplotlib
matplotlib.figure
f = matplotlib.figure
%paste
mandel(10,10,20,-0.5,0.5,-0.5,0.5)
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
mgrid
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
%paste
mandel(100,100,20,-0.5,0.5,-0.5,0.5)
ra, rx, ry = mandel(100,100,20,-0.5,0.5,-0.5,0.5)
[xval for xval in x]
[xval for xval in rx]
rx
ra, rx, ry = mandel(100,100,20,-0.5,0.5,-0.5,0.5)
rx
%paste
ra, rx, ry = mandel(100,100,20,-0.5,0.5,-0.5,0.5)
ra
rx
ra, rx, ry = mandel(100,100,20,-0.5,0.5,-0.5,0.5)
ta
ra
rx
n
n = 50
m = 40
itermax = 30
xmin = -0.5
xmax = 0.5
ymin=-0.5
ymax=0.5
%paste
z
%paste
c
itermax
rem
z
ix
it
img
ix
it
z
ix
x
x[:,0]
img
img.size()
img.size
img.shape
n
img
img[img>0]
nonzero(img)
np.nonzero(img)
nz=np.nonzero(img)
nz[0]
ix[nz[0]]
x[nz[0]]
nz[0]
x[:,nz[0]]
x[nz[0],:]
nz[0]
nz
img
np.nonzero(img)
np.transpose(np.nonzero(img))
np.nonzero(img)
%paste
inds
%paste
rtnlst
%paste
inds
%paste
rtnlst
img
inds
c
rtnlst
set(rtnlst)
np.array(set(rtnlst))
%paste
rtnlst
rem
ix[rem]
x[ix[rem]]
x[:,ix[rem]]
x[ix[rem],:]
x[ix[rem],:][ix]
x[ix[rem],:]
x[ix[rem],:][:,0]
x[ix[rem],:][0,:]
img
img[-3]
img[-2]
img[-4]
img[-5]
img[-6]
img[-8]
img[-11]
img[-13]
inds
x[:,0]
y[:,0]
y[0,;]
y[0,:]
%paste
rtnlst
np.array(rtnlst)
%paste
rtnlst
rntlst.T
rntlst
rtnlst
rtnlst.T
rtnlst.T[0]
import numpy as np
%paste
xmin = -1
xmax = 1
ymin = -2
ymax = 2
%paste
positions
positions[0]
run bokeh_serv_1.py
run tkintex.py
g = GUI()
750+150+175+250+200+1000+175
run numpy_ex.py
%paste
df=ans
import pandas as pd
import numpy as np
from cvxpy import Variable, Minimize, quad_form, Problem, sum_entries
def markowitz_optimizer_3(xs, sigma, lam, mu, constraints):
    """
    Optimise against a set of pre-constructed constraints
    :param xs: The variables to optimise
    :param sigma: nxn covariance matrix between asset return time series
    :param lam: Risk tolerance factor
    :param mu: 1xn numpy array of expected asset returns
    :param constraints: List of constrains to optimise with respect to.
    :return: (weights, cost)
             - weights: The calculated weight vector of each asset
             - cost: The total cost of this portfolio. Useful for ranking optimisation outputs
    """
    objective = Minimize(quad_form(xs, sigma) - lam * mu * xs)  # define Markowitz mean/variance objective function
    p = Problem(objective, constraints)  # create optimization problem
    res = p.solve()  # solve problem
    # If it was not solvable, fail
    if type(res) == str:
        raise OptimizationFailed(res)

    if xs.get_data()[0] == 1:
        weights = np.array([[xs.value]])
    else:
        weights = np.array(xs.value).T

    if weights.any():
        return weights[0], res  # return optimal weights and the cost.
    else:
        return weights, res
from statsmodels.stats.correlation_tools import cov_nearest
from sklearn.covariance.shrunk_covariance_ import OAS
import numpy.linalg as la
def bl_model(sigma, w_tilde, p, v, n, c=1.0, lambda_bar=1.2):
    """
    This is an implementation of the Black-Litterman model based on Meucci's article:

    http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1117574

    Argument Definitions:
      Required:
        :param sigma: nxn numpy array covariance matrix of the asset return time series
        :param w_tilde: nx1 numpy array market cap portfolio weights
        :param p: mxn numpy array corresponding to investor views on future asset movements
        :param v: mx1 numpy array of expected returns of portfolios corresponding to views
        :param n: length of time series of returns used to compute covariance matrix
      Optional:
        :param c: constant representing overall confidence in the views return estimator
        :param lambda_bar: risk-aversion level which Black and Litterman set to 1.2

    Argument Constraints:
        Required:
        sigma -- positive definite symmetric matrix
        w_tilde -- vector with positive entries that sum to one
        p -- matrix of positive or negative floats
        v -- matrix of positive or negative floats

        Optional:
        c -- any positive float, default to 1 (as in example on page 5)
        lambda_bar -- positive float, default to 1.2 as mentioned after equation (5)
    """
    pi = 2.0 * lambda_bar * np.dot(sigma, w_tilde)  # equation (5)
    tau = 1.0 / float(n)  # equation (8)

    omega = np.dot(np.dot(p, sigma), p.T) / c  # equation (12)

    # Main model, equations (20) and (21)
    m1 = np.dot(tau * np.dot(sigma, p.T), la.inv(tau * np.dot(p, np.dot(sigma, p.T)) + omega))
    m2 = v - np.dot(p, pi)
    m3 = np.dot(p, sigma)

    mu_bl = pi + np.dot(m1, m2)
    sig_bl = (1.0 + tau) * sigma - tau * np.dot(m1, m3)

    # Make the matrix symmetric
    sym_bl = (sig_bl + sig_bl.T) / 2

    # The cov matrix may have not been strictly pos semi definite due to rounding etc. Make sure it is.
    psd_bl = cov_nearest(sym_bl)

    return mu_bl, psd_bl
instr_index = ['32_22', '32_29', '32_30', '32_20', '32_1', '32_19', '32_5', '32_10', '32_12', '32_21', '32_16', '32_8', '32_33', '32_11', '32_28', '32_15', '32_17', '32_14', '32_9', '32_18', '32_2', 24, 22, 13, 26, 10, 1, 12, 7, 5, 21, 29, 27, 3, 16, 8, 20, 23, 19, 17, 14, 43, 37, 36]
covars = pd.DataFrame([[0.031839659485120166, 0.017445419674699064, 0.014746691792237851, 0.03175268498818237, 0.009122609028435175, 0.008287233991632564, -0.001179198781512535, -0.0015647393999278236, 0.011189690192270126, 0.020512467284201395, 0.011710980798638127, 0.008672070628859713, 0.015216954150748844, -0.000476586665871213, -0.0010617434929932371, 0.004401434251524827, 0.004505576046115822, 0.014967160922739003, 0.017337341386726008, 0.010420110380005957, 0.014488006520484797, 0.02442138658549728, 0.008190013377355768, 0.010197753408527304, 0.031968566287683534, 0.011078387043028244, 0.009392611887557205, -0.0014517482079687907, 0.0019513403602098185, 0.006367364273843303, 0.005611821320000791, 0.012636373401812683, 0.009920136924536407, 0.011881556080166934, -0.0008842619797177257, -0.0007131902254729673, 0.0032708726034035157, 0.004527724512882452, 0.017881818096367116, 0.006846581725310711, 0.012551239886011192, 0.012713902416479567, 0.009369316209375788, 0.012646247704515102], [0.017445419674699064, 0.033919987853020826, 0.021784579255288924, 0.013410397861145104, 0.004061393278580922, 0.004095160619940831, -0.00011767912548632953, -0.00043918659174971715, 0.016487667888235236, 0.009188454042691967, 0.009998303778888088, 0.006830809953274254, 0.006257887239920846, 6.746471738380601e-05, -0.00048122116213555953, 0.003541111384872488, 0.005501256710830484, 0.02814627932368326, 0.019080700137993154, 0.004702146130655976, 0.006256773264868446, 0.022622273735842035, 0.003978372735282942, 0.00881262042463292, 0.027851615701236416, 0.005315832062426734, 0.004578859375224258, -0.0011654063090690123, 0.0013454254746568825, 0.0023255871567857424, 0.0024319773694986484, 0.01038267005019271, 0.007967586326919315, 0.005342589444221302, -0.00019362406203528984, 0.003241699912902244, 0.004242959997885268, 0.005688696625085306, 0.02171290627292349, 0.005502957416666558, 0.004865399482703529, 0.02580381351404954, 0.003970434166280749, 0.006116934804543327], [0.014746691792237851, 0.021784579255288924, 0.022103150390642583, 0.010376003796950738, 0.003524563622799334, 0.003388833281847133, -0.00017049885115449204, -0.00030670472715332457, 0.018806128013090315, 0.00923316717464621, 0.009569708651932716, 0.006711351231164316, 0.0045529968276507874, 0.000191318735392258, -0.00039210685931628775, 0.0024923135549332082, 0.004197955677008321, 0.018908348168307002, 0.017078371288621896, 0.003777309119644552, 0.004781547128517201, 0.01823640766433911, 0.004248761528841704, 0.008825709892867059, 0.02283259254507068, 0.0044068557532034825, 0.003429797280843861, -0.0009885754005037506, 0.0010328731035137493, 0.0024692168451881237, 0.0032086645899852993, 0.009783746289543512, 0.00773191574505633, 0.004167545746882355, 8.549011979128354e-05, 0.0012881678594864824, 0.002800094993857153, 0.004040603120050084, 0.015078355655078176, 0.004432370965394061, 0.004253923721500531, 0.017826513345385802, 0.0023846299490182603, 0.005031628995239338], [0.03175268498818237, 0.013410397861145104, 0.010376003796950738, 0.06294448458145725, 0.012930481776243554, 0.012432019289991339, -0.0024107282322623548, -0.0030240174892549945, 0.00928817013762961, 0.014192321549287045, 0.0011434598892178145, -0.0036699763691632314, 0.022628003574002867, -0.0014107948113993114, -0.001843108361217148, -0.004851789631407429, -0.004316734302913206, 0.014384658976508815, 0.010258506514604067, 0.014683013665286392, 0.020793901305844055, 0.028244325489251237, 0.009611545498248159, -0.0015222980637701901, 0.04777750754265379, 0.015870830706647587, 0.014258443802490832, -0.002322328409868115, -0.0020683759311144866, 0.008731824666605482, 0.007016293839926123, 0.0027143839651417563, -0.001424590141011482, 0.016668820012191714, -0.00037084169786926136, -0.0007956179443429694, -0.005827979664446019, -0.004047249073904443, 0.015757663411852137, 0.007066848901970061, 0.016511479432337252, 0.010367343039917208, 0.015096975908668755, 0.018023955169857213], [0.009122609028435175, 0.004061393278580922, 0.003524563622799334, 0.012930481776243554, 0.017858635492869843, 0.01573595694303371, -0.00011097860643610344, -0.0007618701582981623, 0.0026312482937422437, 0.009578080477405158, 0.000993636957927855, -0.0014186133538866116, 0.016006664152391766, -0.0003065268688650065, -0.0007168482212796548, -0.0008913712477108519, -0.0010550235945217677, 0.004450718153337882, 0.005537753542287294, 0.018670654861344796, 0.015390449286806074, 0.005798996461789556, 0.009977385129566519, -0.0007701642736904434, 0.0076244959874812905, 0.017957158110167487, 0.01626415539917235, -0.0006157723081016531, 0.00044320912029566174, 0.007808639745460759, 0.008886187223923158, 0.0012119196028022975, -0.00038622418760948275, 0.01847366280421166, -0.0009642255908173303, -0.0002927121479868536, -0.0011865443500700202, -0.0009385948328101327, 0.007667096721670592, 0.008218195528642953, 0.02015400461664047, 0.002190966877755837, 0.010881313973442955, 0.013459922373055929], [0.008287233991632564, 0.004095160619940831, 0.003388833281847133, 0.012432019289991339, 0.01573595694303371, 0.01745461558100089, -5.9290213742259436e-05, -0.0007387065077561661, 0.0026142781367857093, 0.00875507647987259, 0.0009157223577730284, -0.0015670461208778846, 0.014328418034873763, -0.0002551272888953101, -0.0007426331385879797, -0.0012446423502148565, -0.0013718708146645906, 0.00414974446425066, 0.005255959360296503, 0.01640212873345128, 0.013906764220351519, 0.005009555057030381, 0.009173503766536464, -0.000813611091278261, 0.006943125139146305, 0.016351838961546693, 0.017102024007360783, -0.0007781119123091352, 0.00026543116976648256, 0.007553873651719139, 0.00883542426404949, 0.0010760586424320316, -0.0007618150373617403, 0.01662966408161998, -0.0007491383400906648, -0.0012572241571843672, -0.0015257069978318548, -0.0012916753024971627, 0.0068452643842235724, 0.008139903974823889, 0.01805021425095118, 0.00234287337822342, 0.01119521833681992, 0.012082223480368528], [-0.001179198781512535, -0.00011767912548632953, -0.00017049885115449204, -0.0024107282322623548, -0.00011097860643610344, -5.9290213742259436e-05, 0.004466615925720274, 0.003153517730065054, -0.00014051851100741898, -0.0018229646577010363, 0.001054089274914068, 0.0006124141732538112, -0.0019894439391879774, 0.0013695333218588005, 0.0012572410309991074, 0.0018630232313236526, 0.0012295514851829214, -0.00035816478284976516, -6.241742891517255e-05, -0.00025924158928961397, -0.0017082630466319281, -0.001290386650911982, -0.0009091329678366818, 0.0007228744303565371, -0.001925053710505052, -0.0005796055694272761, -0.00044863601385006544, 0.002822253926529705, 0.0010691790871343526, 0.00015487619345246146, -0.00023166817368335514, 0.0010306404379556598, 0.00014846884635623923, -0.0008042940985504425, 0.0008608295862298805, 0.0014669032819722377, 0.0025790979354159034, 0.0016188279543841722, -0.00014467884590826748, -0.0006057435390087924, -0.0003462340269434797, 0.00013071023561181776, -0.0009959203924612707, -0.0015272609320261005], [-0.0015647393999278236, -0.00043918659174971715, -0.00030670472715332457, -0.0030240174892549945, -0.0007618701582981623, -0.0007387065077561661, 0.003153517730065054, 0.0034510544155189667, -0.00016690849673018553, -0.002297956438907261, 0.0009006649217542782, 0.0008009951359393162, -0.002664584302832519, 0.0012906804136652008, 0.0011899397424865146, 0.0017836718845176196, 0.001189564759277309, -0.000583553277840053, -0.0003470289805049184, -0.0009850319243350216, -0.002257112526012216, -0.0014252034193788401, -0.0011712519176894135, 0.0007549131647112057, -0.002059770792057324, -0.001184669304506509, -0.0010881276845272918, 0.0023869334241675105, 0.0012958589575601679, -0.00020110255743461923, -0.000606450125647429, 0.0008213554104735745, 0.00038503858264004524, -0.0015934854374217715, 0.0007450783384854357, 0.0015564491266330603, 0.0023833234448663795, 0.0015086133900765867, -0.0005565871483701563, -0.0008033497148382742, -0.0010428120869083377, -8.538912926293994e-05, -0.001435463329846691, -0.001952497226653836], [0.011189690192270126, 0.016487667888235236, 0.018806128013090315, 0.00928817013762961, 0.0026312482937422437, 0.0026142781367857093, -0.00014051851100741898, -0.00016690849673018553, 0.022499479614410515, 0.007240193500017687, 0.007631125883408227, 0.004835336261629049, 0.0034531723317760754, 0.0002675358410060945, -0.0003704536330344126, 0.00281031281560936, 0.004093171821393577, 0.015929370388983604, 0.014717704399812208, 0.002745482611214716, 0.0037976379421978713, 0.014973928102640088, 0.00505112421469475, 0.007108642688474168, 0.02002268308225988, 0.0034439302548913975, 0.0028612901254836415, -0.0006948240290177008, -0.0006257004296280853, 0.0036032829322397196, 0.004544255763758224, 0.00785026826464023, 0.006174348904235994, 0.003254150915445524, 0.00038402056697619136, 0.0010188347623402, 0.0029251966623667735, 0.003882361482379308, 0.012653268218130957, 0.00518148979755516, 0.003752192260955047, 0.017816838934797997, 0.0023082675560738447, 0.004688439761262159], [0.020512467284201395, 0.009188454042691967, 0.00923316717464621, 0.014192321549287045, 0.009578080477405158, 0.00875507647987259, -0.0018229646577010363, -0.002297956438907261, 0.007240193500017687, 0.05182682018979702, 0.009586002556616997, 0.007855197740372116, 0.013002068106526508, -0.0007651415144861145, -0.0014269521101049592, 0.008189976579832827, 0.006156865458417179, 0.005943270106150087, 0.01274499395375842, 0.010761448499166455, 0.012950706908234811, 0.009323414247353676, 0.01286148160984671, 0.008319602462943332, 0.010161562260861698, 0.011576570215305136, 0.009633159193313059, -0.002196628942789782, 0.0016070054858907303, 0.01016267812593155, 0.014678470477956814, 0.009599858473627166, 0.007127074713658158, 0.012787148946708947, -0.000844293457952558, -0.002212635998854973, 0.005446827846829054, 0.006010745862296663, 0.01384997337250451, 0.012306259383008536, 0.013516129927970778, 0.0056265690021725275, 0.00957431149714662, 0.011947956514230057], [0.011710980798638127, 0.009998303778888088, 0.009569708651932716, 0.0011434598892178145, 0.000993636957927855, 0.0009157223577730284, 0.001054089274914068, 0.0009006649217542782, 0.007631125883408227, 0.009586002556616997, 0.013391766903870088, 0.010045077454291453, 3.4023514758587436e-05, 0.0006690429103047438, 0.00027754717449600635, 0.007770614286820738, 0.007683767460400713, 0.0077472531558506665, 0.011664213837227808, 0.0009236010305063223, 0.0006820697401087569, 0.008704886876901751, 0.0023047881768965585, 0.011722692597194129, 0.009983401616431345, 0.001129200637273646, 0.0006286097134548535, 0.0005911169979471288, 0.003156581638755124, 0.0016353307972437052, 0.0015796062505031576, 0.012685802340635936, 0.010326180458373968, 0.000625680221780508, -0.00015540915481830728, -0.0002707612548559112, 0.007370622428906803, 0.007582651416274325, 0.0092062162274546, 0.002591166753485283, 0.0011330469036313544, 0.007682286673007292, 0.00029328310893961246, 0.0007670466967601034], [0.008672070628859713, 0.006830809953274254, 0.006711351231164316, -0.0036699763691632314, -0.0014186133538866116, -0.0015670461208778846, 0.0006124141732538112, 0.0008009951359393162, 0.004835336261629049, 0.007855197740372116, 0.010045077454291453, 0.012839615642248316, -0.003242322686164698, 0.0005902983235279166, 0.00025824654295984, 0.00786827286501327, 0.007684421866933585, 0.004412998144745611, 0.009041733824573161, -0.0017481307547448732, -0.0024146243319614308, 0.0051059151193175905, -0.00014026014684025622, 0.010815558757099051, 0.005166325757163627, -0.0016284138070607468, -0.002166295598146985, 0.00013683812462233648, 0.003571750978397426, -0.00011371467695790681, -0.00047619584425565465, 0.00988777838234015, 0.012102727880729764, -0.0016838297865968796, -0.0004378777571570961, -0.001597361808603841, 0.007599744045725975, 0.007626629234561176, 0.006089821563051551, 0.00038216629635341715, -0.0015464540315801632, 0.005112909296390537, -0.0019300051324817324, -0.0018962121189375623], [0.015216954150748844, 0.006257887239920846, 0.0045529968276507874, 0.022628003574002867, 0.016006664152391766, 0.014328418034873763, -0.0019894439391879774, -0.002664584302832519, 0.0034531723317760754, 0.013002068106526508, 3.4023514758587436e-05, -0.003242322686164698, 0.032613959276058535, -0.001198463100866341, -0.0012380843597210314, -0.0027806806442089863, -0.0026092018456524008, 0.007461653298967124, 0.0059453239960750035, 0.01873203456068861, 0.029478785940759387, 0.012237246827888666, 0.010161278431636243, -0.0019661278987839386, 0.014265565853014318, 0.019079677328034558, 0.017361136182020044, -0.002070004248049025, -0.0014764272579221326, 0.008156313801880165, 0.01004872231974867, 0.0008680734312997819, -0.00266066291384158, 0.021140812776605324, -0.0005764965165627779, -0.003193179081699721, -0.003736683866924312, -0.0026844837956759094, 0.0112321730481239, 0.00878108897446638, 0.0243585866424528, 0.003950989112259235, 0.01843739965286106, 0.025496865479620153], [-0.000476586665871213, 6.746471738380601e-05, 0.000191318735392258, -0.0014107948113993114, -0.0003065268688650065, -0.0002551272888953101, 0.0013695333218588005, 0.0012906804136652008, 0.0002675358410060945, -0.0007651415144861145, 0.0006690429103047438, 0.0005902983235279166, -0.001198463100866341, 0.001197210302429504, 0.0005231664867730484, 0.000971409405551969, 0.0007545252251667837, -5.309483990572611e-05, 0.00013055205101073422, -0.00043305149136753764, -0.0009598886050949792, -0.00042825593081790685, -0.00031886317831925705, 0.0006093193594813398, -0.0006813181914592136, -0.00045116172227200685, -0.00040495337654906314, 0.0009841411677615642, 0.0005768898661440639, 0.0001460212339792346, -0.00014029147724361164, 0.00063216101950624, 0.0003783914221688859, -0.0006856476687078005, 0.0003001348416402007, 0.0008028363010590308, 0.001194162191425763, 0.0008732419841142976, 2.586051628204495e-05, -0.0001091233622871587, -0.0003829913366871657, 0.00024611046848408726, -0.0006089512548456477, -0.0008075189789860128], [-0.001061743492993237, -0.00048122116213555964, -0.00039210685931628764, -0.0018431083612171478, -0.0007168482212796548, -0.0007426331385879797, 0.0012572410309991074, 0.0011899397424865149, -0.0003704536330344126, -0.0014269521101049592, 0.00027754717449600646, 0.00025824654295984013, -0.0012380843597210316, 0.0005231664867730484, 0.0014351900068469239, 0.0004380205026262269, 0.00031309116044144636, -0.0005091620214507695, -0.0005385923825953387, -0.0008064306980381038, -0.0010402869027899058, -0.0007168553808728438, -0.0007523283612668008, 0.00029444487491986924, -0.001058265543865426, -0.0008445955259859092, -0.0007668439176643573, 0.0013856730067627596, 0.0005728724824087636, -0.0001225667344702082, -0.00045864435033877564, 0.00026015896397467767, -5.711548249306779e-05, -0.0010882452037398087, 0.0005226107685183235, 0.000822293395123324, 0.0008004661092371806, 0.0004568960657643629, -0.00047035616764192666, -0.0004660696389982623, -0.0008667835794939406, -0.0003494330600086204, -0.0007520094619714309, -0.0009173889637726991], [0.004401434251524827, 0.003541111384872488, 0.0024923135549332082, -0.004851789631407429, -0.0008913712477108519, -0.0012446423502148565, 0.0018630232313236526, 0.0017836718845176196, 0.00281031281560936, 0.008189976579832827, 0.007770614286820738, 0.00786827286501327, -0.0027806806442089863, 0.000971409405551969, 0.0004380205026262269, 0.016087554391579356, 0.012777530358498738, 0.004252426074631032, 0.0046466965788024605, -0.001124519577716527, -0.0020859838503210436, -0.000147797220342998, 0.0013499776036005307, 0.007687056285035533, -0.0009367124047059338, -0.001077567934713274, -0.001827614682994179, 0.0009282931926715366, 0.003194449684265215, 0.0017805808285204575, 0.001008940516779158, 0.007240537802374748, 0.007404868838126374, -0.0010126104378077511, 0.0003179120255726183, -0.0006063808960488835, 0.014075823366697751, 0.012418797199472302, 0.007198450651444702, 0.0015985976215490978, 8.578220779199608e-05, 0.0040378689195513726, -0.0010321094627371212, -0.001441936739833441], [0.004505576046115822, 0.005501256710830484, 0.004197955677008321, -0.004316734302913206, -0.0010550235945217677, -0.0013718708146645906, 0.0012295514851829214, 0.001189564759277309, 0.004093171821393577, 0.006156865458417179, 0.007683767460400713, 0.007684421866933585, -0.0026092018456524008, 0.0007545252251667837, 0.0003130911604414464, 0.012777530358498738, 0.01292382175207005, 0.0063695211809995655, 0.00607768433195914, -0.0012796221381488862, -0.002063072286898076, 0.0014729351510654714, 0.00144087895935959, 0.007760049000468542, 0.0010773669011863234, -0.0012041963275498271, -0.0019193348909656589, 0.0005818342586776894, 0.002834013532553399, 0.0015416254388513737, 0.0011757730381654155, 0.007294194076223222, 0.007195918472376003, -0.001196456446445772, 0.00010093428795247028, -0.0002791309468542716, 0.012288087032870557, 0.011988534459012419, 0.008433445439406887, 0.0017509630951576959, -0.0004497449418400794, 0.005487417509530349, -0.0012519284732230333, -0.0014064452282081677], [0.014967160922739003, 0.02814627932368326, 0.018908348168307002, 0.014384658976508815, 0.004450718153337882, 0.00414974446425066, -0.00035816478284976516, -0.000583553277840053, 0.015929370388983604, 0.005943270106150087, 0.0077472531558506665, 0.004412998144745611, 0.007461653298967124, -5.309483990572611e-05, -0.0005091620214507695, 0.004252426074631032, 0.0063695211809995655, 0.030084745030433808, 0.017157479081183126, 0.005166193333673216, 0.00732035573402294, 0.021206126296881195, 0.004132989450422991, 0.006562879755434598, 0.026479349155591917, 0.005789412263218661, 0.0049414523663781325, -0.0009483002252144271, 0.0007883942840355132, 0.003758230104205784, 0.0034855467992536728, 0.008322079939829521, 0.005435970737861994, 0.005691571787897163, -0.0001323269259296218, 0.0032878438371001274, 0.005035284967011177, 0.006528197034153693, 0.02292054169596442, 0.006461035485427435, 0.0060542753982291185, 0.023328227583842488, 0.004800890526275631, 0.007160215925150475], [0.017337341386726008, 0.019080700137993154, 0.017078371288621896, 0.010258506514604067, 0.005537753542287294, 0.005255959360296503, -6.241742891517255e-05, -0.0003470289805049184, 0.014717704399812208, 0.01274499395375842, 0.011664213837227808, 0.009041733824573161, 0.0059453239960750035, 0.00013055205101073422, -0.0005385923825953386, 0.0046466965788024605, 0.00607768433195914, 0.017157479081183126, 0.021485477271257394, 0.006219492650798787, 0.006319657587543919, 0.0172345941460594, 0.006989749589281095, 0.01115227592141107, 0.02119411120627108, 0.007350065519039193, 0.005830251252677175, -0.0008226137134784719, 0.0032849421330069643, 0.006603061844495028, 0.006145629028732427, 0.012139400079731959, 0.009994382401159246, 0.007185507046103705, -0.0007448362121992026, 0.0005520843446016654, 0.004577384700726417, 0.005896998411064525, 0.016806076901364708, 0.009339716614366285, 0.006997923799087088, 0.015175407458825108, 0.004231505735666286, 0.006162119452637754], [0.010420110380005955, 0.0047021461306559756, 0.003777309119644551, 0.014683013665286392, 0.018670654861344796, 0.016402128733451277, -0.00025924158928961413, -0.0009850319243350214, 0.002745482611214716, 0.010761448499166453, 0.0009236010305063226, -0.0017481307547448732, 0.01873203456068861, -0.0004330514913675375, -0.0008064306980381038, -0.001124519577716527, -0.0012796221381488862, 0.005166193333673218, 0.006219492650798785, 0.021267378150495814, 0.01779261530186199, 0.006970444744838294, 0.010796252856608757, -0.0009716545285219874, 0.008871553497231451, 0.019934257115677072, 0.017296459013580665, -0.0006876218304439063, 0.00035548232879575425, 0.008495486883565374, 0.009757879469080404, 0.0012767807998519936, -0.0006974194429579302, 0.020751425574759078, -0.0010401751557747667, -0.00013301349296159577, -0.0015027447494867002, -0.0012031581870240113, 0.00882328370724457, 0.008869510878967318, 0.02244789959620278, 0.00256298430904017, 0.012017095212377687, 0.015520658338197105], [0.014488006520484797, 0.006256773264868446, 0.004781547128517201, 0.020793901305844055, 0.015390449286806074, 0.013906764220351519, -0.0017082630466319281, -0.002257112526012216, 0.0037976379421978713, 0.012950706908234811, 0.0006820697401087569, -0.0024146243319614308, 0.029478785940759387, -0.0009598886050949792, -0.0010402869027899056, -0.0020859838503210436, -0.002063072286898076, 0.00732035573402294, 0.006319657587543919, 0.017792615301862, 0.029174431150896896, 0.01184978234628117, 0.010603057223206681, -0.0012908506946010905, 0.014053277478217963, 0.01846968858346401, 0.01696434622330319, -0.0017712800460833258, -0.0007852087607408851, 0.008884591034663292, 0.010614097146927256, 0.0014416815630093384, -0.001831895390861541, 0.019051232331784105, -0.0004180651148560683, -0.0023244974049131833, -0.0030356845441168825, -0.002106383019178426, 0.01107308329398033, 0.009688972453944133, 0.023018705181460156, 0.00409593913869102, 0.018174524523115, 0.02503467421845381], [0.02442138658549728, 0.022622273735842035, 0.01823640766433911, 0.028244325489251237, 0.005798996461789556, 0.005009555057030381, -0.001290386650911982, -0.0014252034193788401, 0.014973928102640088, 0.009323414247353676, 0.008704886876901751, 0.0051059151193175905, 0.012237246827888666, -0.00042825593081790685, -0.0007168553808728438, -0.000147797220342998, 0.0014729351510654714, 0.021206126296881195, 0.0172345941460594, 0.006970444744838293, 0.01184978234628117, 0.03209507058000451, 0.00516452568398878, 0.007336847318014937, 0.04225776399918735, 0.008087688077454457, 0.006758056048398331, -0.0011885783834028594, 0.0020761146883044824, 0.004538073131121195, 0.0034030390455378552, 0.009966961327544068, 0.007034016644766835, 0.00792424227973617, -0.0005302869619933184, 0.001798903175772146, -0.00026215469256227414, 0.001683376649219371, 0.018184856877714914, 0.00532241886414096, 0.007931016639539362, 0.017770198281021724, 0.007254403132102555, 0.010717726812574036], [0.008190013377355768, 0.003978372735282942, 0.004248761528841704, 0.009611545498248159, 0.009977385129566519, 0.009173503766536464, -0.0009091329678366818, -0.0011712519176894135, 0.00505112421469475, 0.01286148160984671, 0.0023047881768965585, -0.00014026014684025622, 0.010161278431636243, -0.00031886317831925705, -0.0007523283612668008, 0.0013499776036005307, 0.00144087895935959, 0.004132989450422991, 0.006989749589281095, 0.010796252856608757, 0.010603057223206681, 0.00516452568398878, 0.026043946852835505, 0.00025932673786201264, 0.006566068681176352, 0.012066238295179835, 0.011164163804669586, -0.0005996758709659716, 0.001645538572714811, 0.015656224776479898, 0.015836652302319777, 0.002829807984293726, 0.00038470317532973475, 0.012518507871077986, -0.0003564909025915156, 0.0008868161201046285, 0.0007430105988599895, 0.0012722349986886946, 0.009025235661248016, 0.01637787800729981, 0.012071146340767103, 0.004300375934290294, 0.009669246138863342, 0.010843917994032507], [0.010197753408527304, 0.00881262042463292, 0.008825709892867059, -0.0015222980637701901, -0.0007701642736904434, -0.000813611091278261, 0.0007228744303565371, 0.0007549131647112057, 0.007108642688474168, 0.008319602462943332, 0.011722692597194129, 0.010815558757099051, -0.0019661278987839386, 0.0006093193594813398, 0.0002944448749198693, 0.007687056285035533, 0.007760049000468542, 0.006562879755434598, 0.01115227592141107, -0.0009716545285219872, -0.0012908506946010905, 0.007336847318014937, 0.00025932673786201264, 0.014017391561724622, 0.00814935269116441, -0.0008098903004791119, -0.0012798010198539834, 0.0004200920707057498, 0.003957278926046643, 0.0007859365445665889, 1.5719998676464073e-05, 0.011793006024499243, 0.011057719142615347, -0.001328508167390506, -0.0004155760171512315, -0.0008449319363846134, 0.007334740493814307, 0.00766651074075161, 0.008138476275539779, 0.001694388334980821, -0.00089252709786211, 0.006900870409625347, -0.0012502061427962059, -0.0008767861573267678], [0.031968566287683534, 0.027851615701236416, 0.02283259254507068, 0.04777750754265379, 0.0076244959874812905, 0.006943125139146305, -0.001925053710505052, -0.002059770792057324, 0.02002268308225988, 0.010161562260861698, 0.009983401616431345, 0.005166325757163627, 0.014265565853014318, -0.0006813181914592136, -0.0010582655438654263, -0.0009367124047059338, 0.0010773669011863234, 0.026479349155591917, 0.02119411120627108, 0.008871553497231451, 0.014053277478217963, 0.04225776399918735, 0.006566068681176352, 0.00814935269116441, 0.0679768296929317, 0.010742089314140706, 0.009033039974551283, -0.0018572424365058304, 0.0020044446835122717, 0.006873696162432919, 0.004392013598801715, 0.011745520352884486, 0.007939398919083159, 0.00998808453980752, -0.0008515514770756744, 0.002716404306721221, -0.000959976816542761, 0.0014987611116330886, 0.022893664956131782, 0.006443024278907612, 0.008985578459848894, 0.023084477446350456, 0.009978944804583135, 0.012874897823889384], [0.011078387043028244, 0.005315832062426734, 0.0044068557532034825, 0.015870830706647587, 0.017957158110167487, 0.016351838961546693, -0.0005796055694272761, -0.001184669304506509, 0.0034439302548913975, 0.011576570215305136, 0.001129200637273646, -0.0016284138070607468, 0.019079677328034558, -0.00045116172227200685, -0.0008445955259859093, -0.001077567934713274, -0.0012041963275498271, 0.005789412263218661, 0.007350065519039193, 0.019934257115677072, 0.01846968858346401, 0.008087688077454457, 0.012066238295179835, -0.0008098903004791119, 0.010742089314140706, 0.022295049995328997, 0.017978816555078516, -0.0009437426810350193, 0.0004996673443073315, 0.009877769048003315, 0.010708701895091292, 0.001719865501493418, -0.0006494585925647375, 0.021647367731374857, -0.0009716116172898828, 0.00168766708616567, -0.0017453129902175652, -0.0011476136562465916, 0.009446474724507523, 0.01054098262532227, 0.023004773904637673, 0.0032983472395662653, 0.013477487334869344, 0.01629447560037418], [0.009392611887557205, 0.004578859375224258, 0.003429797280843861, 0.014258443802490832, 0.01626415539917235, 0.017102024007360783, -0.00044863601385006544, -0.0010881276845272918, 0.0028612901254836415, 0.009633159193313059, 0.0006286097134548535, -0.002166295598146985, 0.017361136182020044, -0.00040495337654906314, -0.0007668439176643572, -0.001827614682994179, -0.0019193348909656589, 0.0049414523663781325, 0.005830251252677175, 0.01729645901358067, 0.01696434622330319, 0.006758056048398331, 0.011164163804669586, -0.0012798010198539834, 0.009033039974551283, 0.017978816555078516, 0.0206794034091421, -0.0011025251024225243, 0.00016958019839903539, 0.00967020592270951, 0.009895061451661006, 0.0009691254510435724, -0.001312627261574672, 0.018370798962298672, -0.0012041989976758502, -0.0010878970437603387, -0.0022019729604167825, -0.0017822330270327235, 0.00817485849698306, 0.009871444067597135, 0.020400013297377423, 0.002949697844854235, 0.013838405998861212, 0.01519753343593665], [-0.0014517482079687907, -0.0011654063090690123, -0.0009885754005037506, -0.002322328409868115, -0.0006157723081016531, -0.0007781119123091352, 0.002822253926529705, 0.0023869334241675105, -0.0006948240290177008, -0.002196628942789782, 0.0005911169979471288, 0.00013683812462233648, -0.002070004248049025, 0.0009841411677615642, 0.00138567300676276, 0.0009282931926715366, 0.0005818342586776894, -0.0009483002252144271, -0.0008226137134784719, -0.0006876218304439065, -0.0017712800460833258, -0.0011885783834028594, -0.0005996758709659716, 0.0004200920707057498, -0.0018572424365058304, -0.0009437426810350193, -0.0011025251024225243, 0.005015085398493367, 0.0004634449367106835, 0.0004270996136017936, -0.00018904355964327363, 0.0005653755089056297, -0.0002269334652772039, -0.0011923904052049288, 0.0009668471797670507, 0.000815625429217031, 0.0017767959661539215, 0.0008710648671783142, -0.00038573402458916316, -0.0007202171130597213, -0.0006865873413405195, -0.0007375294810568087, -0.0008811574765131955, -0.0013813437179221813], [0.0019513403602098185, 0.0013454254746568825, 0.0010328731035137493, -0.0020683759311144866, 0.00044320912029566174, 0.00026543116976648256, 0.0010691790871343526, 0.0012958589575601679, -0.0006257004296280853, 0.0016070054858907303, 0.003156581638755124, 0.003571750978397426, -0.0014764272579221326, 0.0005768898661440639, 0.0005728724824087636, 0.003194449684265215, 0.002834013532553399, 0.0007883942840355132, 0.0032849421330069643, 0.0003554823287957544, -0.0007852087607408851, 0.0020761146883044824, 0.001645538572714811, 0.003957278926046643, 0.0020044446835122717, 0.0004996673443073315, 0.00016958019839903539, 0.0004634449367106835, 0.03759486870916775, 0.0005933927430379396, -0.00030404415892070554, 0.003351388083567852, 0.0031234467331309004, 2.1894121827549846e-05, 0.0009617834388098193, -0.0036699340558133888, 0.002987142464550736, 0.0024794499546524004, 0.0015572721204468144, 0.0012491572782882948, -0.00023723592831017786, -0.00013697960800333221, -8.838456589877707e-05, -0.0009017585555726926], [0.006367364273843303, 0.0023255871567857424, 0.0024692168451881237, 0.008731824666605482, 0.007808639745460759, 0.007553873651719139, 0.00015487619345246146, -0.00020110255743461923, 0.0036032829322397196, 0.01016267812593155, 0.0016353307972437052, -0.00011371467695790681, 0.008156313801880165, 0.0001460212339792346, -0.00012256673447020813, 0.0017805808285204575, 0.0015416254388513737, 0.003758230104205784, 0.006603061844495028, 0.00849548688356537, 0.008884591034663292, 0.004538073131121195, 0.015656224776479898, 0.0007859365445665889, 0.006873696162432919, 0.009877769048003315, 0.00967020592270951, 0.0004270996136017936, 0.0005933927430379396, 0.024667789896668426, 0.015505083509639316, 0.0021645829198185212, 0.0001441772106281388, 0.010075435721833498, -0.000438442132351412, 0.0003018961766226782, 0.0013425101503243425, 0.0014232624875924913, 0.007733971372131361, 0.017445739748688974, 0.010230255037072039, 0.003167769494473775, 0.008224420084031422, 0.00970085833007239], [0.005611821320000791, 0.0024319773694986484, 0.0032086645899852993, 0.007016293839926123, 0.008886187223923158, 0.00883542426404949, -0.00023166817368335514, -0.000606450125647429, 0.004544255763758224, 0.014678470477956814, 0.0015796062505031576, -0.00047619584425565465, 0.01004872231974867, -0.00014029147724361164, -0.00045864435033877575, 0.001008940516779158, 0.0011757730381654155, 0.0034855467992536728, 0.006145629028732427, 0.009757879469080404, 0.010614097146927256, 0.0034030390455378552, 0.015836652302319777, 1.5719998676464073e-05, 0.004392013598801715, 0.010708701895091292, 0.009895061451661006, -0.00018904355964327363, -0.00030404415892070554, 0.015505083509639316, 0.0315040326658566, 0.002204328467526484, -0.00025762045975909843, 0.009739217055177243, -0.0001902447563839193, 0.0022668658345870872, 0.0009860394783169275, 0.0009168948426823264, 0.007557343774602623, 0.0166797738592844, 0.010844126344682166, 0.003040556962836901, 0.007088187365688085, 0.010501966980371888], [0.012636373401812683, 0.01038267005019271, 0.009783746289543512, 0.0027143839651417563, 0.0012119196028022975, 0.0010760586424320316, 0.0010306404379556598, 0.0008213554104735745, 0.00785026826464023, 0.009599858473627166, 0.012685802340635936, 0.00988777838234015, 0.0008680734312997819, 0.00063216101950624, 0.00026015896397467767, 0.007240537802374748, 0.007294194076223222, 0.008322079939829521, 0.012139400079731959, 0.0012767807998519932, 0.0014416815630093384, 0.009966961327544068, 0.002829807984293726, 0.011793006024499243, 0.011745520352884486, 0.001719865501493418, 0.0009691254510435724, 0.0005653755089056297, 0.003351388083567852, 0.0021645829198185212, 0.002204328467526484, 0.014146736911123512, 0.010319457188611493, 0.0012504320876171866, -8.646697721957845e-05, 0.00016978431075431052, 0.006893324078878647, 0.0072581326317306925, 0.01003874092487631, 0.0029592945662011705, 0.0016080522021146787, 0.008174384410833608, 0.0009403493288200847, 0.0014811597422741474], [0.009920136924536407, 0.007967586326919315, 0.00773191574505633, -0.001424590141011482, -0.00038622418760948275, -0.0007618150373617403, 0.00014846884635623923, 0.00038503858264004524, 0.006174348904235994, 0.007127074713658158, 0.010326180458373968, 0.012102727880729764, -0.00266066291384158, 0.0003783914221688859, -5.711548249306786e-05, 0.007404868838126374, 0.007195918472376003, 0.005435970737861994, 0.009994382401159246, -0.0006974194429579302, -0.001831895390861541, 0.007034016644766835, 0.00038470317532973475, 0.011057719142615347, 0.007939398919083159, -0.0006494585925647375, -0.001312627261574672, -0.0002269334652772039, 0.0031234467331309004, 0.0001441772106281388, -0.00025762045975909843, 0.010319457188611493, 0.016580158635147703, -0.0007362212245966772, -0.0008026688621718367, 0.0005817550927398939, 0.006962494511716422, 0.0071185660307044344, 0.006994678799852374, 0.0006836809490381482, -0.00107401016663579, 0.0063170312064965576, -0.0015987301362172296, -0.0012533295574916501], [0.011881556080166934, 0.005342589444221302, 0.004167545746882355, 0.016668820012191714, 0.01847366280421166, 0.01662966408161998, -0.0008042940985504425, -0.0015934854374217715, 0.003254150915445524, 0.012787148946708947, 0.000625680221780508, -0.0016838297865968796, 0.021140812776605324, -0.0006856476687078005, -0.0010882452037398087, -0.0010126104378077511, -0.001196456446445772, 0.005691571787897163, 0.007185507046103705, 0.020751425574759078, 0.019051232331784105, 0.00792424227973617, 0.012518507871077986, -0.001328508167390506, 0.00998808453980752, 0.021647367731374857, 0.018370798962298672, -0.0011923904052049288, 2.1894121827549846e-05, 0.010075435721833498, 0.009739217055177243, 0.0012504320876171866, -0.0007362212245966772, 0.025678502336240916, -0.0010173249364135088, -0.0006902161165650018, -0.0018346525362304064, -0.0012343754289262383, 0.009852122101347659, 0.0098595035250842, 0.024251714751955176, 0.0036246196867453654, 0.014758173098246488, 0.01667099343233354], [-0.0008842619797177257, -0.00019362406203528984, 8.549011979128354e-05, -0.00037084169786926136, -0.0009642255908173303, -0.0007491383400906648, 0.0008608295862298805, 0.0007450783384854357, 0.00038402056697619136, -0.000844293457952558, -0.00015540915481830728, -0.0004378777571570961, -0.0005764965165627779, 0.0003001348416402007, 0.0005226107685183235, 0.0003179120255726183, 0.00010093428795247028, -0.0001323269259296218, -0.0007448362121992026, -0.0010401751557747667, -0.0004180651148560683, -0.0005302869619933184, -0.0003564909025915156, -0.0004155760171512315, -0.0008515514770756744, -0.0009716116172898828, -0.0012041989976758502, 0.0009668471797670507, 0.0009617834388098193, -0.000438442132351412, -0.0001902447563839193, -8.646697721957845e-05, -0.0008026688621718367, -0.0010173249364135088, 0.0063738701163368276, -0.0026419116839411583, 0.0005182729757754288, 9.303454456552809e-05, -0.0001283158735321928, -0.00026939124297884127, -0.0007828890746400904, 0.00027877758111389644, -0.0002575665138532109, -0.0003923627211274862], [-0.0007131902254729673, 0.003241699912902244, 0.0012881678594864824, -0.0007956179443429694, -0.0002927121479868536, -0.0012572241571843672, 0.0014669032819722377, 0.0015564491266330603, 0.0010188347623402, -0.002212635998854973, -0.0002707612548559112, -0.001597361808603841, -0.003193179081699721, 0.0008028363010590308, 0.000822293395123324, -0.0006063808960488835, -0.0002791309468542716, 0.0032878438371001274, 0.0005520843446016654, -0.00013301349296159577, -0.0023244974049131833, 0.001798903175772146, 0.0008868161201046285, -0.0008449319363846134, 0.002716404306721221, 0.00168766708616567, -0.0010878970437603387, 0.000815625429217031, -0.0036699340558133888, 0.0003018961766226782, 0.0022668658345870872, 0.00016978431075431052, 0.0005817550927398939, -0.0006902161165650018, -0.0026419116839411583, 0.08027157490691615, -0.0006631642914603113, -4.1795032116939095e-05, 0.0029798810382848204, 0.002405787561494445, -0.000390953420905642, 0.002772571436308576, -0.0010877158545467148, -0.002137843213972154], [0.0032708726034035157, 0.004242959997885268, 0.002800094993857153, -0.005827979664446019, -0.0011865443500700202, -0.0015257069978318548, 0.0025790979354159034, 0.0023833234448663795, 0.0029251966623667735, 0.005446827846829054, 0.007370622428906803, 0.007599744045725975, -0.003736683866924312, 0.001194162191425763, 0.0008004661092371806, 0.014075823366697751, 0.012288087032870557, 0.005035284967011177, 0.004577384700726417, -0.0015027447494867007, -0.0030356845441168825, -0.00026215469256227414, 0.0007430105988599895, 0.007334740493814307, -0.000959976816542761, -0.0017453129902175652, -0.0022019729604167825, 0.0017767959661539215, 0.002987142464550736, 0.0013425101503243425, 0.0009860394783169275, 0.006893324078878647, 0.006962494511716422, -0.0018346525362304064, 0.0005182729757754288, -0.0006631642914603113, 0.015210023398317535, 0.01239132214341081, 0.007418290543247034, 0.0010423722420529503, -0.0007868350326181125, 0.0045597207354166405, -0.0017486289506009303, -0.0023185384868498115], [0.004527724512882452, 0.005688696625085305, 0.004040603120050085, -0.004047249073904443, -0.000938594832810132, -0.0012916753024971627, 0.0016188279543841722, 0.0015086133900765867, 0.0038823614823793088, 0.006010745862296663, 0.007582651416274328, 0.007626629234561177, -0.0026844837956759094, 0.0008732419841142977, 0.0004568960657643629, 0.0124187971994723, 0.011988534459012419, 0.006528197034153693, 0.005896998411064525, -0.0012031581870240113, -0.0021063830191784265, 0.001683376649219371, 0.001272234998688695, 0.00766651074075161, 0.0014987611116330886, -0.0011476136562465916, -0.0017822330270327235, 0.0008710648671783142, 0.0024794499546524004, 0.0014232624875924913, 0.0009168948426823264, 0.0072581326317306925, 0.007118566030704436, -0.0012343754289262385, 9.30345445655282e-05, -4.1795032116939095e-05, 0.01239132214341081, 0.012839916508446719, 0.008631262729682664, 0.0016225600325417385, -0.0005324413224335348, 0.005637777688322981, -0.0011980139632522503, -0.0014973548791474213], [0.017881818096367116, 0.02171290627292349, 0.015078355655078176, 0.015757663411852137, 0.007667096721670592, 0.0068452643842235724, -0.00014467884590826748, -0.0005565871483701563, 0.012653268218130957, 0.01384997337250451, 0.0092062162274546, 0.006089821563051551, 0.0112321730481239, 2.586051628204495e-05, -0.00047035616764192666, 0.007198450651444702, 0.008433445439406887, 0.02292054169596442, 0.016806076901364708, 0.00882328370724457, 0.01107308329398033, 0.018184856877714914, 0.009025235661248016, 0.008138476275539779, 0.022893664956131782, 0.009446474724507523, 0.00817485849698306, -0.00038573402458916316, 0.0015572721204468144, 0.007733971372131361, 0.007557343774602623, 0.01003874092487631, 0.006994678799852374, 0.009852122101347659, -0.0001283158735321928, 0.0029798810382848204, 0.007418290543247034, 0.008631262729682664, 0.028302430139888486, 0.009489789493763359, 0.011201011158501391, 0.01779975598219325, 0.007838455724226338, 0.010253871242494342], [0.006846581725310711, 0.005502957416666558, 0.004432370965394061, 0.007066848901970061, 0.008218195528642953, 0.008139903974823889, -0.0006057435390087924, -0.0008033497148382742, 0.00518148979755516, 0.012306259383008536, 0.002591166753485283, 0.00038216629635341715, 0.00878108897446638, -0.0001091233622871587, -0.0004660696389982622, 0.0015985976215490978, 0.0017509630951576959, 0.006461035485427435, 0.009339716614366285, 0.008869510878967318, 0.009688972453944133, 0.00532241886414096, 0.01637787800729981, 0.001694388334980821, 0.006443024278907612, 0.01054098262532227, 0.009871444067597135, -0.0007202171130597213, 0.0012491572782882948, 0.017445739748688974, 0.0166797738592844, 0.0029592945662011705, 0.0006836809490381482, 0.0098595035250842, -0.00026939124297884127, 0.002405787561494445, 0.0010423722420529503, 0.0016225600325417385, 0.009489789493763359, 0.021976117247282195, 0.010032480936013798, 0.005609599520788054, 0.00805180582356089, 0.009889039394500511], [0.012551239886011192, 0.004865399482703529, 0.004253923721500531, 0.016511479432337252, 0.02015400461664047, 0.01805021425095118, -0.0003462340269434797, -0.0010428120869083377, 0.003752192260955047, 0.013516129927970778, 0.0011330469036313544, -0.0015464540315801632, 0.0243585866424528, -0.0003829913366871657, -0.0008667835794939406, 8.578220779199608e-05, -0.0004497449418400794, 0.0060542753982291185, 0.006997923799087088, 0.02244789959620278, 0.023018705181460156, 0.007931016639539362, 0.012071146340767103, -0.00089252709786211, 0.008985578459848894, 0.023004773904637673, 0.020400013297377423, -0.0006865873413405195, -0.00023723592831017786, 0.010230255037072039, 0.010844126344682166, 0.0016080522021146787, -0.00107401016663579, 0.024251714751955176, -0.0007828890746400904, -0.000390953420905642, -0.0007868350326181125, -0.0005324413224335348, 0.011201011158501391, 0.010032480936013798, 0.03573637999311365, 0.0033361028333289233, 0.015921026066921615, 0.02018689079373267], [0.012713902416479567, 0.02580381351404954, 0.017826513345385802, 0.010367343039917208, 0.002190966877755837, 0.00234287337822342, 0.00013071023561181776, -8.538912926293994e-05, 0.017816838934797997, 0.0056265690021725275, 0.007682286673007292, 0.005112909296390537, 0.003950989112259235, 0.00024611046848408726, -0.0003494330600086204, 0.0040378689195513726, 0.005487417509530349, 0.023328227583842488, 0.015175407458825108, 0.00256298430904017, 0.00409593913869102, 0.017770198281021724, 0.004300375934290294, 0.006900870409625347, 0.023084477446350456, 0.0032983472395662653, 0.002949697844854235, -0.0007375294810568087, -0.00013697960800333221, 0.003167769494473775, 0.003040556962836901, 0.008174384410833608, 0.0063170312064965576, 0.0036246196867453654, 0.00027877758111389644, 0.002772571436308576, 0.0045597207354166405, 0.005637777688322979, 0.01779975598219325, 0.005609599520788054, 0.0033361028333289233, 0.025768959337050625, 0.003450178857180758, 0.004633818330608652], [0.009369316209375788, 0.003970434166280749, 0.0023846299490182603, 0.015096975908668755, 0.010881313973442955, 0.01119521833681992, -0.0009959203924612707, -0.001435463329846691, 0.0023082675560738447, 0.00957431149714662, 0.00029328310893961246, -0.0019300051324817324, 0.01843739965286106, -0.0006089512548456477, -0.000752009461971431, -0.0010321094627371212, -0.0012519284732230333, 0.004800890526275631, 0.004231505735666286, 0.012017095212377687, 0.018174524523115, 0.007254403132102555, 0.009669246138863342, -0.0012502061427962059, 0.009978944804583135, 0.013477487334869344, 0.013838405998861212, -0.0008811574765131955, -8.838456589877707e-05, 0.008224420084031422, 0.007088187365688085, 0.0009403493288200847, -0.0015987301362172296, 0.014758173098246488, -0.0002575665138532109, -0.0010877158545467148, -0.0017486289506009303, -0.0011980139632522503, 0.007838455724226338, 0.00805180582356089, 0.015921026066921615, 0.003450178857180758, 0.019930417997179404, 0.016281339762763903], [0.012646247704515105, 0.006116934804543325, 0.005031628995239338, 0.018023955169857216, 0.013459922373055929, 0.012082223480368533, -0.0015272609320261005, -0.001952497226653836, 0.004688439761262159, 0.011947956514230059, 0.000767046696760103, -0.0018962121189375623, 0.025496865479620153, -0.0008075189789860121, -0.0009173889637726991, -0.001441936739833441, -0.0014064452282081677, 0.007160215925150475, 0.006162119452637752, 0.015520658338197105, 0.025034674218453807, 0.010717726812574036, 0.010843917994032509, -0.0008767861573267679, 0.012874897823889384, 0.01629447560037418, 0.015197533435936647, -0.0013813437179221813, -0.0009017585555726928, 0.00970085833007239, 0.01050196698037189, 0.0014811597422741474, -0.0012533295574916504, 0.01667099343233354, -0.0003923627211274864, -0.002137843213972154, -0.002318538486849811, -0.0014973548791474213, 0.010253871242494342, 0.009889039394500513, 0.02018689079373267, 0.004633818330608652, 0.016281339762763906, 0.02405818510981499]], columns=instr_index, index=instr_index)
weights = pd.Series([0.02845602454354196, 0.08575491032367964, 0.09635442738018427, 0.00798793116029196, 0.01079004655044673, 0.0010731038119663231, 0.000391968137578974, 0.00109170640405093, 0.35237552188130833, 0.026482526022638054, 0.011584021009309244, 0.0003572318413244218, 0.0047001359595524, 0.0003052915420252003, 0.006029763347831267, 0.0030131142530864397, 0.0901552469091965, 0.0287257358252079, 0.22712472018299112, 0.006732892213130807, 0.010513680700657562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], index=covars.index)
data = (pd.DataFrame(np.array((("VAS", 1390620, 1, 10),
("BTWFAUS_AU", 1355002, 2, 36),
("ROTHWSE_AU", 1355002, 2, 37),
("ILB", 50516.81, 5, 12),
("DSUM", 46040, 8, 27),
("VTS", 29271808.69, 9, 17),
("RGB", 140699, 10, 7),
("RSM", 39345.94, 11, 16),
("BTWEUSH_AU", 45414118.09, 12, 43),
("VGS", 45414118.09, 12, 5),
("FTAL", 3702169.64, 14, 19),
("SLXX", 388329.83, 15, 20),
("EMB", 1492947.34, 16, 29),
("IEAG", 11619198.2, 17, 23),
("VLC", 867734.4, 18, 14),
("VSO", 138301.5, 19, 1),
("MCHI", 1029483.68, 20, 26),
("IJP", 3413065.01, 21, 21),
("AAXJ", 3667409.28, 22, 24),
("BOND", 777115.23, 28, 8),
("IEU", 11052083.31, 29, 22),
("RIGS", 12418147.89, 30, 13),
("VGE", 4251935.37, 32, 28),
("VHY", 605753, 33, 3))),
columns=['sym','mkt_cap','index','sym_id'])
.convert_objects(convert_numeric=True)
.set_index('sym_id')
.drop(28)
.reindex(instr_index)
)
data.loc[[36,37],'mkt_cap'] /= 2 
data.loc[[43,5],'mkt_cap'] /= 2
id_to_idx = data[21:]['index'].apply(lambda x: '32_' + str(int(x)))
data['index'] = data['index'].apply(lambda x: '32_' + str(x))
import itertools
pd.set_option('display.max_columns', 500)
good_locs = list(id_to_idx.iteritems()) + [(val, key) for key, val in id_to_idx.iteritems()]
good_locs += [(key, key) for key,val in good_locs]
perms = itertools.product([k for k,v in good_locs], repeat=2)
mu_covars = covars.copy()
for item in perms:
    if item not in good_locs:
        mu_covars.loc[item[0], item[1]] = 0
data['covar_dot_wt'] = mu_covars.dot(weights)
mu, sigma = bl_model(mu_covars, weights, np.zeros((0, 44)), [], 365)
# Do the BL phase. I need to run it twice, as the sigma that comes out of the zeroed covar is all NANs. Not sure why.
mu, sigma = bl_model(mu_covars, weights, np.zeros((0, 44)), [], 365)
data['mu'] = mu
xs = Variable(len(mu[21:]))
lam = 1.2
constraints = [
    xs >= 0,
    sum_entries(xs) == 1,
]
data['markowitz_100'] = pd.Series(markowitz_optimizer_3(xs, sigma[21:, 21:], 100, mu[21:], constraints)[0], index=instr_index[21:])
data['markowitz_12'] = pd.Series(markowitz_optimizer_3(xs, sigma[21:, 21:], lam, mu[21:], constraints)[0], index=instr_index[21:])
data['markowitz_0'] = pd.Series(markowitz_optimizer_3(xs, sigma[21:, 21:], 0, mu[21:], constraints)[0], index=instr_index[21:])
data.sort('mu').dropna().to_csv()
%paste
import smtplib
%paste
pwd
cd ~/Desktop/PyTalk/
ls
%paste
import pandas we pd
import pandas as pd
%paste
import datetime as dt
%paste
tickers
df
import crawler
import sys
pwd
sys.path.append("/home/steve98654/Desktop/PyCon/SphinxTut/pycon-sphinx-tutorial")
ls
cd crawler/
!make html
ls
cd docs/
!make html
ls
pwd
cd ..
pwd
ls
cd src/
ls
cd crawler/
ls
sys.path.append("/home/steve98654/Desktop/PyCon/SphinxTut/pycon-sphinx-tutorial/crawler/src/crawler")
pwd
cd ../..
ls
cd ..
ls
cd crawler/
ls
cd docs/
ls
!make html
sys.path
ls
!make html
ls
pwd
cd ..
ls
cd src/
ls
cd crawler/
ls
!cat __init__.py
ls
pwd
dr = pwd
%43
%[4]3
%[43]
pwd
import crawler
pwd
run tudor_talk.py
ls
run tudor_talk.py
ls
df
cell
df
df.groupby('GOOG')
df
cell
df
df.head()
df.tail()
df['Ticker']
set(df['Ticker'])
df
df.columns
df.groupby('Ticker')
df.groupby('Ticker').mean()
%paste
ls
import wordcount_lib
chars, words, lines = wordcount_lib.consume('example.txt')
ls
import pytest
import requests
cat_years_to_hooman_years(1.2)
cat_years_to_hooman_years(0)
cat_years_to_hooman_years(0.4)
cat_years_to_hooman_years(0.2)
cat_years_to_hooman_years(0.6)
cat_years_to_hooman_years(0.7)
cat_years_to_hooman_years(0.7) is not None
cat_years_to_hooman_years(40)
1
3.14
3.14j
'a string literal'
{'one':1,'two':2}
False,True
None
NotImplemented,Ellipsis
int,list
type(None)
True.__doc__
'asdf'.__add__
True.__class__
bool
bool.__class__
bool._mro_
bool.__mro__
id(3)
id(2)
id(0)
id(None)
id(323409209)
id('qwer')
callable(len)
len('asdf'0
len('asdf')

)
callable(len)
'adsfa'.__len__.__doc__
callable(int)
dict.__doc__
callable(True)
True(asdf)
True(4)
5.0
dir(5.0)
dir.__doc__
5.0.__add__
5.0.__add__(4.3)
callable(5.0.__add__)
4.__add__
4.0__add__
4.0.__add__
4..__add__
4..__add__(3)
4.__add__(3)
(4).__add__(3)
import sys
size=sys.getsizeof
print('Size of w is', size('w'), 'bytes.')
print('Size of w is', 4, 'bytes.')
print('Size of w is', size('3', 'bytes.')
(
))
print('Size of w is', size(4), 'bytes.')
print('Size of w is', size(0), 'bytes.')
print('Size of w is', size('0'), 'bytes.')
size(2**60)
size(2**60-1)
size(2**30)
size(2**1000)
2**1000
size(str('wer'))
dir()
%paste
%load dirp
def _dir(obj='__secret', _CLUTTER=dir()): 
    """ 
    A version of dir that excludes clutter and private names. 
    """ 
    if obj == '__secret': 
        names = globals().keys() 
    else: 
        names = dir(obj) 
    return [n for n in names if n not in _CLUTTER and not n.startswith
('_')] 
     
def _dirn(_CLUTTER=dir()): 
    """ 
    Display the current global namespace, ignoring old names. 
    """ 
    return dict([ 
        (n, v) for (n, v) in globals().items() 
        if not n in _CLUTTER and not n.startswith('_')])
_dirn()
a
a = 300
_dirn()
a
a = 400
_dirn()
b = a
b
a
_dirn()
id(a)
id(b)
id(b) == id(a)
_dirn()
del a
_dirn()
a
b = 'walk'
_dirn()
id(b)
del b
_dirn()
class SimpleNamespace:
    pass
%paste
p = SimpleNamespace()
p
p.__di
p.__dict__
p.x, p.y = 1.0, 3.2
p.__dict__
p.x
p.y
i = 10
j = 10
i == j
i is j
i = 500
j = 500
i is j
id(i)
id(j)
i == j
%paste
range(3,4)
range(-7,-3)
dir()
_dir = dir
_dir()
_dirp()
%paste
_dir()
v=1
_dir()
v
type(v)
w = v
v is w
_dir()
id v
id(v)
id(w)
m = [1,2,3]
m
n = m
m is n
id(m)
id(n)
m[1] = 'two'
m
id(m)
id(n)
n
m
m is in
m is n
int.__add__
int.__sub__
int.__add__ = int.__sub__
from sys import getrefcount as refs
refs(None)
refs.__doc__
refs(1)
refs(2)
refs(34)
refs(341)
refs(3411)
refs(341123423)
refs(341123423123123)
refs(None)
refs(object)
sentinel_value = object()
refs(sentinel_value)
sentinel_value == object()
sentinel_value == sentinel_value
id(sentinel_value)
id(object)
refs(1)
refs(2)
refs(25)
[[i,refs(i) for i in range(100)]
]
[[i,refs(i)] for i in range(100)]
i,j=1,2
i,j
i,j=j,i
i,j
i,j,k=(1,2,3)
i,j
i,k
i,j,k = [1,2,3]
i,j
i,j,k='ijk'
i,j
i,j,k,*rest ='ijklnasdfasf'
i, j, k, *rest ='ijklnasdfasf'
first, *middle, second_last, last = 'abcdefg'
print(*'asdf')
print(**'asdf')
import dis
dis.dis('i = j = 500')
dis.__doc__
[[i,refs(i)] for i in range(500)][-20::]
[[i,refs(i)] for i in range(260)][-20::]
[[i,refs(i)] for i in Xrange(260)][-20::]
[[i,refs(i)] for i in xrange(260)][-20::]
[i for i in range(4)]
i
[i for i in range(10)]
i
[i for i in xrange(10)]
i
[print(i) for i in xrange(10)]
len
%paste
f1()
%paste
f2()
len
len = 99
len
%paste
print_len('asdf')
len
del len
len
print_len('walk')
pass
pass = 3
is = pass
%paste
test_outer_scope()
%paste
test_local()
x
%paste
test_unbound_local()
test_unbound_local.__code__
test_unbound_local.__code__.co_argcount
test_unbound_local.__code__.co_name
test_unbound_local.__code__.co_names
test_unbound_local.__code__.co_varnames
dis.dis(test_unbound_local.__code__.co_code)
%paste
x
test_global()
x
test_global.__code__.co_varnames
%paste
x=
x=1
x
ls
_dir()
import pprint
_dir()
import csv as csv_module
_dir()
math
del math
import math
_dir()
del math
_dir()
import importlib
importlib.import_module('math')
_dir()
math_module = importlib.import_module('math')
math_module.pi
import 'math'
import math
math.py
math.pi
math_module.pi
math_module.pi is math.pi
id(math.pi)
id(math_module.pi)
import module_name
import pprint
doc(pprint)
dir(pprint)
pprint.__doc__
pprint.__file__
pprint.__name__
from pprint import *
[n for n in dir() if not n.startswith('_')]
import importlib
help(importlib.reload)
s1=s2='123'
s1
s2
id(s1)
id(s2)
s1 is s2
s2 = s2 +'4'
s2
id(s1)
id(s2)
m1 = m2 = [1,2,3]
m1 is m2
m1 is m2, m1,m2
m2 = m2 + [4]
m1 is m2, m1,m2
s1 = s2 = '123'
s2 += '4'
s2
s1
s1 is s2,s1,s2
m1=m2=[1,2,3]
m2+=4
m2+=[4]
m1 is m2,m1,m2
m1
m2
id(m1)
id(m2)
s2
s2.__iadd__
s2.__iadd__('4')
s2.__add__('4')
t1 = (7,)
t1
t1[0] +=1
t1[0]
t1[0] = t1[0] + 1
t1
t2=([7],)
t2[0] += [8]
t2[0]
tlst = [1,2,3]
tlst[0] = 4
tlst
tlst.__setitem__.__doc__
().__iadd__
m = [7]
t2 = (m,)
t2
temp = m.__iadd__([8])
temp
temp is  m
list.__iadd__.__doc__
t2
temp
m
t2[0] = temp
t2[0]
%paste
s1='one'
s1
test_1a(s1)
%paste
m1 = [1,2,3]
m1
test_2a(m1)
m1
%paste
import functools
%paste
add(2,3)
%timeit add(2,3)
%paste
add(2,3)
add(2,34)
%timeit add(2,34)
%timeit add(2,344)
%timeit 2+344
add(2,3)
%paste
add_to_2 = create_adder(2)
add_to_2(4)
%paste
add
traced_add = trace_function(add)
traced_add(2,3)
add = trace_function(add)
add(2,3)
@trace_function
def add(first,second):
    return first + second
add
add.__name__
add.__class__
add.__doc__
x
del x
%paste
return_3('add')
def x():
    pass
x = return_3(x)
x
ret
return_3
return_3(asdf)
return_3('asdf')
@return_3
def x():
    pass
x
type(x)
%paste
b=Number(4)
b.amount
b.add(3.2)
b
b.amount
print(type.__doc__)
type(type.__doc__)
%paste
return_5(1,2,3)
return_5(None,None,None)
x
x=return_5(None,None,None)
x
type(x)
class y(object):
    __metaclass__ = return_5
y
type(y)
%paste
g = Get()
g[1]
g[-1]
g[0:3]
g[0:10:2]
g['Jan']
g[g]
pwd
%save my_ipython_shell_examples
%save 'my_ipython_shell_examples'
%save my_ipython_shell_examples
ls
pwd
dr = pwd
pwd
import readline
readline.write_history_file('/home/steve98654/Desktop/PyCon/EpiphaniesTut/ipython_shell.txt')
